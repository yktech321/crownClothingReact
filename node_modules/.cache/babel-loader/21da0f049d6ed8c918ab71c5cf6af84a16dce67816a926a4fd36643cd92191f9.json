{"ast":null,"code":"var _jsxFileName = \"/home/purvi/Desktop/react/react-code3/monster-rolodex/src/components/button/button.component.jsx\";\nimport './button.styles.scss';\n\n/**\n * now we have to leverage this button component for three \n * types of button that we are gonna use in our app\n * \n * 1> default\n * \n * 2> inverted \n * \n * 3> google sign-in \n * \n */\n\n/**\n * we can do so by making a button types class \n * having different class Names to the Button component\n * then calling them inside button container using eslint\n */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst BUTTON_TYPE_CLASSES = {\n  google: 'google-sign-in',\n  inverted: 'inverted'\n};\n/**\n * otherProps will have all the things of signUp form other than button \n */\nconst Button = _ref => {\n  let {\n    children,\n    buttonType,\n    ...otherProps\n  } = _ref;\n  return (\n    /*#__PURE__*/\n    // <button className=\"button-container\">\n    /**\n     * rather than using the above we can\n     */\n    _jsxDEV(\"button\", {\n      className: `button-container ${BUTTON_TYPE_CLASSES[buttonType]}`,\n      ...otherProps,\n      children: children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 9\n    }, this)\n  );\n};\n_c = Button;\nexport default Button;\nvar _c;\n$RefreshReg$(_c, \"Button\");","map":{"version":3,"names":["jsxDEV","_jsxDEV","BUTTON_TYPE_CLASSES","google","inverted","Button","_ref","children","buttonType","otherProps","className","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/purvi/Desktop/react/react-code3/monster-rolodex/src/components/button/button.component.jsx"],"sourcesContent":["import './button.styles.scss'\n\n/**\n * now we have to leverage this button component for three \n * types of button that we are gonna use in our app\n * \n * 1> default\n * \n * 2> inverted \n * \n * 3> google sign-in \n * \n */\n\n/**\n * we can do so by making a button types class \n * having different class Names to the Button component\n * then calling them inside button container using eslint\n */\n\nconst BUTTON_TYPE_CLASSES = {\n    google: 'google-sign-in',\n    inverted: 'inverted'\n}\n/**\n * otherProps will have all the things of signUp form other than button \n */\nconst Button = ({children, buttonType, ...otherProps}) => {\n    return(\n        // <button className=\"button-container\">\n        /**\n         * rather than using the above we can\n         */\n        <button className={`button-container ${BUTTON_TYPE_CLASSES[buttonType]}`}{...otherProps}>\n            {/* whatever p h1 etc text will come inside the children component here */}\n            {children}\n        </button>\n    )\n}\n\nexport default Button;"],"mappings":";AAAA,OAAO,sBAAsB;;AAE7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AAJA,SAAAA,MAAA,IAAAC,OAAA;AAMA,MAAMC,mBAAmB,GAAG;EACxBC,MAAM,EAAE,gBAAgB;EACxBC,QAAQ,EAAE;AACd,CAAC;AACD;AACA;AACA;AACA,MAAMC,MAAM,GAAGC,IAAA,IAA2C;EAAA,IAA1C;IAACC,QAAQ;IAAEC,UAAU;IAAE,GAAGC;EAAU,CAAC,GAAAH,IAAA;EACjD;IAAA;IACI;IACA;AACR;AACA;IACQL,OAAA;MAAQS,SAAS,EAAG,oBAAmBR,mBAAmB,CAACM,UAAU,CAAE,EAAE;MAAA,GAAIC,UAAU;MAAAF,QAAA,EAElFA;IAAQ;MAAAI,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACL;EAAC;AAEjB,CAAC;AAAAC,EAAA,GAXKV,MAAM;AAaZ,eAAeA,MAAM;AAAC,IAAAU,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}
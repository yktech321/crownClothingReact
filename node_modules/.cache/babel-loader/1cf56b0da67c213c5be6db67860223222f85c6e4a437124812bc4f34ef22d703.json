{"ast":null,"code":"var _jsxFileName = \"/home/purvi/Desktop/react/react-code2/monster-rolodex/src/App.js\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport SearchBox from \"./components/searchbox/search-box.component\";\nimport CardList from \"./components/card-list/card-list.component\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  console.log('render');\n  const [searchField, setSearchField] = useState('');\n  const onSearchChange = event => {\n    const searchFieldString = event.target.value.toLowerCase();\n    setSearchField(searchFieldString);\n  };\n\n  //for example\n  const onStringChange = event => {\n    setStringField(event.target.value);\n  };\n  const [monsters, setMonsters] = useState([]);\n  //just example for filteredMonster\n  const [stringField, setStringField] = userState('');\n\n  // fetch(\"https://jsonplaceholder.typicode.com/users\")\n  //   .then((response) => response.json())\n  //   .then((users) => {\n  //     setMonsters(users);\n  //   });\n\n  /**\n   * to stop this rendering loop we need to use useState for creating \n   * a side-effect and stopping the loop \n   * \n   * useEffect takes in two arguments first a callback function and \n   * the other an array of dependencies \n   * \n   * call back function will tell that what we want to happen with our \n   * functional component \n   * \n   * array contains dependencies like state values or prop that we are \n   * going to transfer in the function \n   * \n   * so this array tells that whenever there's gonna be any change in the \n   * dependencies then only i'm gonna run this call-back function\n   *  \n   * like the very first time the entire code will run so the call-back \n   * function will run to mount everything but later only when the dependecies\n   * in the dependency array changes\n   * \n   * so by doing that we can generate the side-effect which simply means the\n   * effects that come out of our function \n   * \n   * so in our case it's fetch\n   * \n   * so the problem of re-render loop is resolved as we are going to run \n   * this fetch function only once as the dependency array is empty so \n   * it won't change \n   */\n\n  useEffect(() => {\n    console.log('effect fired');\n    fetch(\"https://jsonplaceholder.typicode.com/users\").then(response => response.json()).then(users => setMonsters(users));\n  }, []);\n\n  /**\n   * next big thing is filteredMonster\n   * now everytime this function runs this filteredMonster array \n   * is getting re-built \n   * \n   * it's ok like we want this to happen whenever monster or searchField \n   * change \n   * \n   * say for example we also want it to trigger some changes \n   */\n  const filteredMonster = monsters.filter(monster => {\n    return monster.name.toLowerCase().includes(searchField);\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"app-title\",\n      children: \"Monsters Rolodex\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(SearchBox, {\n      onChangeHandler: onSearchChange,\n      placeholder: 'search monsters',\n      className: 'monster-search-box'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CardList, {\n      monsters: filteredMonster\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 83,\n    columnNumber: 5\n  }, this);\n};\n\n/****************************************************** */\n// class App extends Component {\n//   constructor() {\n//     super();\n//     this.state = {\n//       monsters: [],\n//       searchField: '', //an empty string\n//     };\n//   }\n\n//   onSearchChange = (event) => {\n//     const searchField = event.target.value.toLowerCase();\n//     this.setState(\n//       () => {\n//         return {searchField};\n//       }\n//     );\n//   }\n\n//   componentDidMount() {\n//     fetch(\"https://jsonplaceholder.typicode.com/users\")\n//       .then((response) => response.json())\n//       .then((users) => {\n//         this.setState(\n//           () => {\n//             return { monsters: users };\n//           },\n//           () => {\n//             console.log(this.state);\n//           }\n//         );\n//       });\n//   }\n\n//   render() {\n//     const { monsters,searchField } =this.state;\n//     const { onSearchChange } = this;\n//     const filteredMonster = monsters.filter((monster) => {\n//       return monster.name.toLowerCase().includes(searchField); \n//     });\n\n//     return (\n//       <div className=\"App\">\n//         <div className=\"app-title\">Monsters Rolodex</div>\n//         <SearchBox \n//         onChangeHandler= {onSearchChange} \n//         placeholder={'search monsters'}\n//         className= {'monster-search-box'}\n//         />\n//         <CardList monsters={filteredMonster}/>\n//       </div>\n//     );\n//   }\n// }\n_s(App, \"KuYLFJLWkMpOkW1WH4HSs8Wx7D4=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useEffect","useState","SearchBox","CardList","jsxDEV","_jsxDEV","App","_s","console","log","searchField","setSearchField","onSearchChange","event","searchFieldString","target","value","toLowerCase","onStringChange","setStringField","monsters","setMonsters","stringField","userState","fetch","then","response","json","users","filteredMonster","filter","monster","name","includes","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onChangeHandler","placeholder","_c","$RefreshReg$"],"sources":["/home/purvi/Desktop/react/react-code2/monster-rolodex/src/App.js"],"sourcesContent":["import { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport SearchBox from \"./components/searchbox/search-box.component\";\nimport CardList from \"./components/card-list/card-list.component\";\n\nconst App=() =>{\n  console.log('render');\n  const[searchField, setSearchField] = useState('');\n  \n  const onSearchChange= (event) => {\n      const searchFieldString = event.target.value.toLowerCase();\n      setSearchField(searchFieldString);\n  }\n\n  //for example\n  const onStringChange= (event) => {\n    setStringField(event.target.value)\n  }\n  \n  const[monsters,setMonsters] = useState([]);\n  //just example for filteredMonster\n  const[stringField,setStringField] = userState('');\n\n\n  // fetch(\"https://jsonplaceholder.typicode.com/users\")\n  //   .then((response) => response.json())\n  //   .then((users) => {\n  //     setMonsters(users);\n  //   });\n\n/**\n * to stop this rendering loop we need to use useState for creating \n * a side-effect and stopping the loop \n * \n * useEffect takes in two arguments first a callback function and \n * the other an array of dependencies \n * \n * call back function will tell that what we want to happen with our \n * functional component \n * \n * array contains dependencies like state values or prop that we are \n * going to transfer in the function \n * \n * so this array tells that whenever there's gonna be any change in the \n * dependencies then only i'm gonna run this call-back function\n *  \n * like the very first time the entire code will run so the call-back \n * function will run to mount everything but later only when the dependecies\n * in the dependency array changes\n * \n * so by doing that we can generate the side-effect which simply means the\n * effects that come out of our function \n * \n * so in our case it's fetch\n * \n * so the problem of re-render loop is resolved as we are going to run \n * this fetch function only once as the dependency array is empty so \n * it won't change \n */\n\nuseEffect(()=>{\n  console.log('effect fired');\n  fetch(\"https://jsonplaceholder.typicode.com/users\")\n    .then((response) => response.json())\n    .then((users) => setMonsters(users));\n}, []);\n  \n/**\n * next big thing is filteredMonster\n * now everytime this function runs this filteredMonster array \n * is getting re-built \n * \n * it's ok like we want this to happen whenever monster or searchField \n * change \n * \n * say for example we also want it to trigger some changes \n */\n  const filteredMonster = monsters.filter((monster) => {\n    return monster.name.toLowerCase().includes(searchField); \n  });\n\n  return(\n    <div className=\"App\">\n      <div className=\"app-title\">Monsters Rolodex</div>\n        \n      <SearchBox \n        onChangeHandler= {onSearchChange} \n        placeholder={'search monsters'}\n        className= {'monster-search-box'}\n      />\n      {/* for example */}\n      <CardList monsters={filteredMonster}/>\n    </div>\n  )\n}\n\n/****************************************************** */\n// class App extends Component {\n//   constructor() {\n//     super();\n//     this.state = {\n//       monsters: [],\n//       searchField: '', //an empty string\n//     };\n//   }\n\n//   onSearchChange = (event) => {\n//     const searchField = event.target.value.toLowerCase();\n//     this.setState(\n//       () => {\n//         return {searchField};\n//       }\n//     );\n//   }\n\n//   componentDidMount() {\n//     fetch(\"https://jsonplaceholder.typicode.com/users\")\n//       .then((response) => response.json())\n//       .then((users) => {\n//         this.setState(\n//           () => {\n//             return { monsters: users };\n//           },\n//           () => {\n//             console.log(this.state);\n//           }\n//         );\n//       });\n//   }\n\n//   render() {\n//     const { monsters,searchField } =this.state;\n//     const { onSearchChange } = this;\n//     const filteredMonster = monsters.filter((monster) => {\n//       return monster.name.toLowerCase().includes(searchField); \n//     });\n\n//     return (\n//       <div className=\"App\">\n//         <div className=\"app-title\">Monsters Rolodex</div>\n//         <SearchBox \n//         onChangeHandler= {onSearchChange} \n//         placeholder={'search monsters'}\n//         className= {'monster-search-box'}\n//         />\n//         <CardList monsters={filteredMonster}/>\n//       </div>\n//     );\n//   }\n// }\nexport default App;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"var _jsxFileName = \"/home/purvi/Desktop/react/react-code3/monster-rolodex/src/components/sign-up-form/sign-up-form.component.jsx\",\n  _s = $RefreshSig$();\nimport { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst defaultFormFields = {\n  displayName: '',\n  email: '',\n  password: '',\n  confirmPassword: ''\n};\nconst SigniUpForm = () => {\n  _s();\n  const [formFields, setFormFields] = useState(defaultFormFields);\n  const {\n    displayName,\n    email,\n    password,\n    confirmPassword\n  } = formFields;\n  const handleChange = event => {\n    const {\n      name,\n      value\n    } = event.target;\n\n    /**\n     * now in setFormFields we want all the other values to be as it is\n     * we just wanna update that particular value which was changed or updated\n     */\n\n    setFormFields = {\n      ...formFields,\n      [name]: value\n    };\n  };\n\n  // let's console the formFields to see the final changes\n  console.log(formFields);\n\n  // now after setting the values we want to finish the authentication of the fields which we are going to do next\n\n  /**\n   * now just passing in this function won't work\n   * we need to make it generic for every single input of ours\n   * \n   * so to do that\n   * we need to pass this in each of our input as onChangeHandler \n   * \n   * and then we must know which particular field is changing in order to do the apt change in our formFields\n   * so in each input we will give a name that is ultimately gonna trigger our event\n   * \n   * next thing we want to do is get the appropriate value from the input field\n   * basically the value that is going to be entered by user is going to be the stored in the field we specify in the value \n   * as we destructure it from the event above\n   */\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \" Sign Up with Ur Email and Password 0\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: () => {},\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Display Name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        onChange: handleChange,\n        name: \"displayName\",\n        value: displayName,\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Email\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"email\",\n        onChange: handleChange,\n        name: \"email\",\n        value: email,\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Password\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"password\",\n        onChange: handleChange,\n        name: \"password\",\n        value: password,\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Confirm Password\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"password\",\n        onChange: handleChange,\n        name: \"confirmPassword\",\n        value: confirmPassword,\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Sign Up\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 9\n  }, this);\n};\n_s(SigniUpForm, \"BSTP5B8VO6H/Fwu712VTuD9hH54=\");\n_c = SigniUpForm;\nexport default SigniUpForm;\nvar _c;\n$RefreshReg$(_c, \"SigniUpForm\");","map":{"version":3,"names":["useState","jsxDEV","_jsxDEV","defaultFormFields","displayName","email","password","confirmPassword","SigniUpForm","_s","formFields","setFormFields","handleChange","event","name","value","target","console","log","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","type","onChange","required","_c","$RefreshReg$"],"sources":["/home/purvi/Desktop/react/react-code3/monster-rolodex/src/components/sign-up-form/sign-up-form.component.jsx"],"sourcesContent":["import { useState  } from \"react\";\nconst defaultFormFields = {\n    displayName: '',\n    email: '',\n    password: '',\n    confirmPassword: ''\n}\n\nconst SigniUpForm = () => {\n    const[formFields, setFormFields] = useState(defaultFormFields)\n    const {displayName, email, password, confirmPassword} = formFields;\n\n    const handleChange = (event) => {\n        const {name, value} = event.target;\n\n        /**\n         * now in setFormFields we want all the other values to be as it is\n         * we just wanna update that particular value which was changed or updated\n         */\n\n        setFormFields = ({...formFields, [name]:value})\n    }\n\n    // let's console the formFields to see the final changes\n    console.log(formFields);\n\n    // now after setting the values we want to finish the authentication of the fields which we are going to do next\n    \n\n    /**\n     * now just passing in this function won't work\n     * we need to make it generic for every single input of ours\n     * \n     * so to do that\n     * we need to pass this in each of our input as onChangeHandler \n     * \n     * and then we must know which particular field is changing in order to do the apt change in our formFields\n     * so in each input we will give a name that is ultimately gonna trigger our event\n     * \n     * next thing we want to do is get the appropriate value from the input field\n     * basically the value that is going to be entered by user is going to be the stored in the field we specify in the value \n     * as we destructure it from the event above\n     */\n\n    return(\n        <div>\n            <h1> Sign Up with Ur Email and Password 0</h1>\n            <form onSubmit= {() =>{}}>\n                <label>Display Name</label>\n                <input type=\"text\" onChange={handleChange} name=\"displayName\" value={displayName} required />\n                <label>Email</label>\n                <input type=\"email\" onChange={handleChange} name=\"email\" value={email} required />\n                <label>Password</label>\n                <input type=\"password\" onChange={handleChange} name=\"password\" value={password} required />\n                <label>Confirm Password</label>\n                <input type=\"password\" onChange={handleChange} name=\"confirmPassword\" value={confirmPassword} required />\n                <button type=\"submit\">Sign Up</button>\n            </form> \n        </div>\n    ) \n}\n\nexport default SigniUpForm;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
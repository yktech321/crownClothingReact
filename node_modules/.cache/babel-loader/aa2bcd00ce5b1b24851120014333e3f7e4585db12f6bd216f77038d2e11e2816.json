{"ast":null,"code":"var _jsxFileName = \"/home/purvi/Desktop/react/react-code/monster-rolodex/src/App.js\";\nimport { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass App extends Component {\n  constructor() {\n    /**calls the underlying constructor method from any other classes u're extending from */\n    super();\n    this.state = {\n      name: 'Andrei'\n    };\n  }\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: /*#__PURE__*/_jsxDEV(\"header\", {\n        className: \"App-header\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: logo,\n          className: \"App-logo\",\n          alt: \"logo\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 17,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Hi \", this.state.name]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 19,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => {\n            /*\n              {name: 'Yihua'}\n              {name: 'Yihua'}\n            *this won't work as the react is reference by memory so it rerenders only when completely new object is created\n             * while here only the value of same object is being altered \n                    \n                    const obj1= {name: 'Andrei'}\n                    undefined\n                    const obj2=obj1\n                    undefined\n                    obj2===obj1\n                    true\n                    obj1.name='Yihua'\n                    'Yihua'\n                    obj1\n                    {name: 'Yihua'}\n                    obj2\n                    {name: 'Yihua'}\n               * react is reference to memory and these two objects are pointers pointing to the same memory\n               * even though the value has changed it's still the same location in memory \n               * \n               * so react says that i'm going to re render only when their is a completely different object in memory\n               * \n                    const obj3= Object.assign({},obj1)\n                    undefined\n                    obj3\n                    {name: 'Yihua'}\n               * obj3 might look same as obj1 but it's not as obj3 is different as Object.assign is used to create new object\n                    obj1===obj3\n                    false\n               * \n               * now this looks the same but it is different as we are typing it whole again\n               * therefore it's not going to be equal to the obj1 or obj3\n               * \n               * so here we are going to rather use setstate, we give it an object that we want to shallow merge with our current object \n               * shallow merge means whatever value u pass inside it if the key value is same then the value is going to be updated\n               * \n               * \n               * \n            const obj4= {name:'Yihua'}\n            undefined\n            obj4\n            {name: 'Yihua'}\n            obj1===obj4\n            false\n            obj3===obj4\n            false\n            obj1==obj4\n            false \n              \n              */\n            this.state.name = 'Yihua';\n            console.log(this.state);\n          },\n          children: \"Change Name\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 20,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 16,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 7\n    }, this);\n  }\n}\n\n/*function App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n    </div>\n  );\n}*/\n\nexport default App;","map":{"version":3,"names":["Component","logo","jsxDEV","_jsxDEV","App","constructor","state","name","render","className","children","src","alt","fileName","_jsxFileName","lineNumber","columnNumber","onClick","console","log"],"sources":["/home/purvi/Desktop/react/react-code/monster-rolodex/src/App.js"],"sourcesContent":["import {Component} from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nclass App extends Component {\n  constructor() {\n    /**calls the underlying constructor method from any other classes u're extending from */\n    super();\n    this.state ={\n      name: 'Andrei'\n    };\n  }\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          {/* whenever these variables change then react re renders the whole page again */}\n          <p>Hi {this.state.name}</p>  \n          <button onClick={()=> {\n            /*\n              {name: 'Yihua'}\n              {name: 'Yihua'}\n            *this won't work as the react is reference by memory so it rerenders only when completely new object is created\n             * while here only the value of same object is being altered \n                    \n                    const obj1= {name: 'Andrei'}\n                    undefined\n                    const obj2=obj1\n                    undefined\n                    obj2===obj1\n                    true\n                    obj1.name='Yihua'\n                    'Yihua'\n                    obj1\n                    {name: 'Yihua'}\n                    obj2\n                    {name: 'Yihua'}\n               * react is reference to memory and these two objects are pointers pointing to the same memory\n               * even though the value has changed it's still the same location in memory \n               * \n               * so react says that i'm going to re render only when their is a completely different object in memory\n               * \n                    const obj3= Object.assign({},obj1)\n                    undefined\n                    obj3\n                    {name: 'Yihua'}\n               * obj3 might look same as obj1 but it's not as obj3 is different as Object.assign is used to create new object\n                    obj1===obj3\n                    false\n               * \n               * now this looks the same but it is different as we are typing it whole again\n               * therefore it's not going to be equal to the obj1 or obj3\n               * \n               * so here we are going to rather use setstate, we give it an object that we want to shallow merge with our current object \n               * shallow merge means whatever value u pass inside it if the key value is same then the value is going to be updated\n               * \n               * \n               * \n\nconst obj4= {name:'Yihua'}\nundefined\nobj4\n{name: 'Yihua'}\nobj1===obj4\nfalse\nobj3===obj4\nfalse\nobj1==obj4\nfalse \n              \n              */\n              this.state.name='Yihua';\n              console.log(this.state);\n              }  \n            }\n          >\n            Change Name\n          </button>\n        </header>\n      </div>\n    );\n  }\n}\n\n/*function App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n    </div>\n  );\n}*/\n\nexport default App;\n"],"mappings":";AAAA,SAAQA,SAAS,QAAO,OAAO;AAC/B,OAAOC,IAAI,MAAM,YAAY;AAC7B,OAAO,WAAW;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnB,MAAMC,GAAG,SAASJ,SAAS,CAAC;EAC1BK,WAAWA,CAAA,EAAG;IACZ;IACA,KAAK,CAAC,CAAC;IACP,IAAI,CAACC,KAAK,GAAE;MACVC,IAAI,EAAE;IACR,CAAC;EACH;EACAC,MAAMA,CAAA,EAAG;IACP,oBACEL,OAAA;MAAKM,SAAS,EAAC,KAAK;MAAAC,QAAA,eAClBP,OAAA;QAAQM,SAAS,EAAC,YAAY;QAAAC,QAAA,gBAC5BP,OAAA;UAAKQ,GAAG,EAAEV,IAAK;UAACQ,SAAS,EAAC,UAAU;UAACG,GAAG,EAAC;QAAM;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC,eAElDb,OAAA;UAAAO,QAAA,GAAG,KAAG,EAAC,IAAI,CAACJ,KAAK,CAACC,IAAI;QAAA;UAAAM,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eAC3Bb,OAAA;UAAQc,OAAO,EAAEA,CAAA,KAAK;YACpB;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;YAEc,IAAI,CAACX,KAAK,CAACC,IAAI,GAAC,OAAO;YACvBW,OAAO,CAACC,GAAG,CAAC,IAAI,CAACb,KAAK,CAAC;UACvB,CACD;UAAAI,QAAA,EACF;QAED;UAAAG,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACH;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACN,CAAC;EAEV;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,eAAeZ,GAAG"},"metadata":{},"sourceType":"module","externalDependencies":[]}
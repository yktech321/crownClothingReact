{"ast":null,"code":"var _jsxFileName = \"/home/purvi/Desktop/react/react-code3/monster-rolodex/src/components/routes/navigation/navigation.component.jsx\",\n  _s = $RefreshSig$();\nimport { Fragment, useContext } from \"react\";\nimport { Outlet, Link } from 'react-router-dom';\nimport { ReactComponent as CrwnLogo } from \"../../../assets/crown.svg\";\nimport './navigation.styles.scss';\nimport { UserContext } from '../../../context/user.context';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Navigation = () => {\n  _s();\n  const {\n    currentUser\n  } = useContext(UserContext);\n  console.log(currentUser);\n  /**\n   * why this component ran?\n   * since we logged in that means our functional component was re-rendered\n   * as the value inside hook useContext tells whenever \n   * the value inside this context updates we re-render\n   * \n  So what's happening here is that because we're leveraging this current user value, we are saying,\n  Oh, I want you to run my functional component again and re render me because this value inside of the\n  user context has updated.\n  And the reason why this triggers is because of you state being called with the setter function.\n  So as we remember, a component re renders whenever it's state updates or whenever it's props changes.\n  Here you can imagine that this used state value setter function was called this current user value updates.\n  That means that any component that is listening for current user should in turn update, meaning that\n  it should re render which our current user does.\n  Because if the current user value updates, we most likely will want to update our X because there's\n  a chance we're using it as part of our UI.\n  So this is how context works.\n  It seems complicated, but really all it is is that this context is just a glorified component that\n  is really just leveraging you state.\n  And all we're doing is exposing the value as well as the center of this use state value externally.\n  Whatever values that you want a component to be able to expose, you can also expose through our context,\n  which we will see later throughout the course.\n  But really this is all that's happening here is that we created some parent level component at the very\n  top of our app that gives us access to some component inside.\n  Use state value.\n  Then inside of our respective places, we're either getting and using the setter or we're getting and\n  using the actual value.\n  This is use context.\n  So in the next video, what we're going to do is we're going to talk about some of the nuances with\n  use context in our model of understanding re renders with components.\n    */\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"navigation\",\n      children: [/*#__PURE__*/_jsxDEV(Link, {\n        className: \"logo-containert\",\n        to: \"/\",\n        children: /*#__PURE__*/_jsxDEV(CrwnLogo, {\n          className: \"logo\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"nav-links-container\",\n        children: [/*#__PURE__*/_jsxDEV(Link, {\n          className: \"nav-link\",\n          to: \"/shop\",\n          children: \"SHOP\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(Link, {\n          className: \"nav-link\",\n          to: \"/auth\",\n          children: \"SIGN IN\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Outlet, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 9\n  }, this);\n};\n_s(Navigation, \"T/0NbE5fCPzJ+82MNh+lO012Fso=\");\n_c = Navigation;\nexport default Navigation;\nvar _c;\n$RefreshReg$(_c, \"Navigation\");","map":{"version":3,"names":["Fragment","useContext","Outlet","Link","ReactComponent","CrwnLogo","UserContext","jsxDEV","_jsxDEV","Navigation","_s","currentUser","console","log","children","className","to","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/purvi/Desktop/react/react-code3/monster-rolodex/src/components/routes/navigation/navigation.component.jsx"],"sourcesContent":["\nimport { Fragment,useContext } from \"react\";\nimport {Outlet, Link} from 'react-router-dom';\nimport {ReactComponent as CrwnLogo} from \"../../../assets/crown.svg\"\nimport './navigation.styles.scss'\nimport {UserContext} from '../../../context/user.context'\nconst Navigation = () =>{\n    const {currentUser} = useContext(UserContext);\n    console.log(currentUser);\n    /**\n     * why this component ran?\n     * since we logged in that means our functional component was re-rendered\n     * as the value inside hook useContext tells whenever \n     * the value inside this context updates we re-render\n     * \nSo what's happening here is that because we're leveraging this current user value, we are saying,\nOh, I want you to run my functional component again and re render me because this value inside of the\nuser context has updated.\nAnd the reason why this triggers is because of you state being called with the setter function.\nSo as we remember, a component re renders whenever it's state updates or whenever it's props changes.\nHere you can imagine that this used state value setter function was called this current user value updates.\nThat means that any component that is listening for current user should in turn update, meaning that\nit should re render which our current user does.\nBecause if the current user value updates, we most likely will want to update our X because there's\na chance we're using it as part of our UI.\nSo this is how context works.\nIt seems complicated, but really all it is is that this context is just a glorified component that\nis really just leveraging you state.\nAnd all we're doing is exposing the value as well as the center of this use state value externally.\nWhatever values that you want a component to be able to expose, you can also expose through our context,\nwhich we will see later throughout the course.\nBut really this is all that's happening here is that we created some parent level component at the very\ntop of our app that gives us access to some component inside.\nUse state value.\nThen inside of our respective places, we're either getting and using the setter or we're getting and\nusing the actual value.\nThis is use context.\nSo in the next video, what we're going to do is we're going to talk about some of the nuances with\nuse context in our model of understanding re renders with components.\n\n     */\n    return(\n        <Fragment>\n            <div className='navigation'>\n                <Link className= 'logo-containert' to='/'>\n                    <CrwnLogo className='logo'/>\n                </Link>\n            <div className='nav-links-container'>\n                <Link className= 'nav-link' to='/shop'>\n                    SHOP\n                </Link>\n                <Link className= 'nav-link' to='/auth'>\n                    SIGN IN\n                </Link>\n            </div>\n            </div>\n            <Outlet/>\n        </Fragment>\n    )\n}\n\nexport default Navigation;"],"mappings":";;AACA,SAASA,QAAQ,EAACC,UAAU,QAAQ,OAAO;AAC3C,SAAQC,MAAM,EAAEC,IAAI,QAAO,kBAAkB;AAC7C,SAAQC,cAAc,IAAIC,QAAQ,QAAO,2BAA2B;AACpE,OAAO,0BAA0B;AACjC,SAAQC,WAAW,QAAO,+BAA+B;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACzD,MAAMC,UAAU,GAAGA,CAAA,KAAK;EAAAC,EAAA;EACpB,MAAM;IAACC;EAAW,CAAC,GAAGV,UAAU,CAACK,WAAW,CAAC;EAC7CM,OAAO,CAACC,GAAG,CAACF,WAAW,CAAC;EACxB;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EAEI,oBACIH,OAAA,CAACR,QAAQ;IAAAc,QAAA,gBACLN,OAAA;MAAKO,SAAS,EAAC,YAAY;MAAAD,QAAA,gBACvBN,OAAA,CAACL,IAAI;QAACY,SAAS,EAAE,iBAAiB;QAACC,EAAE,EAAC,GAAG;QAAAF,QAAA,eACrCN,OAAA,CAACH,QAAQ;UAACU,SAAS,EAAC;QAAM;UAAAE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAC;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC1B,CAAC,eACXZ,OAAA;QAAKO,SAAS,EAAC,qBAAqB;QAAAD,QAAA,gBAChCN,OAAA,CAACL,IAAI;UAACY,SAAS,EAAE,UAAU;UAACC,EAAE,EAAC,OAAO;UAAAF,QAAA,EAAC;QAEvC;UAAAG,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAM,CAAC,eACPZ,OAAA,CAACL,IAAI;UAACY,SAAS,EAAE,UAAU;UAACC,EAAE,EAAC,OAAO;UAAAF,QAAA,EAAC;QAEvC;UAAAG,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAM,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACN,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACD,CAAC,eACNZ,OAAA,CAACN,MAAM;MAAAe,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAC,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEnB,CAAC;AAAAV,EAAA,CArDKD,UAAU;AAAAY,EAAA,GAAVZ,UAAU;AAuDhB,eAAeA,UAAU;AAAC,IAAAY,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}
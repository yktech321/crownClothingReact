{"ast":null,"code":"var _jsxFileName = \"/home/purvi/Desktop/react/react-code3/monster-rolodex/src/context/user.context.jsx\",\n  _s = $RefreshSig$();\nimport { createContext, useState } from 'react';\n\n//as the actual value u wanna access\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const UserContext = /*#__PURE__*/createContext({\n  /**\n   * currentUser being an actual object the empty state of\n   * an object should be null as we want a  null check to define whether or not \n   * we have a user existing object or no object\n   */\n  currentUser: null,\n  /**\n   * it;'s an empty function that does nothing \n   * we are going to set it in the app component itself \n   * as when and how we will require the currentUser \n   */\n  setCurrentUser: () => null\n});\n//actual component \nexport const UserProvider = _ref => {\n  _s();\n  let {\n    children\n  } = _ref;\n  /**\n   * we know that we want to store a user object let's \n   * call it as currentUser\n   *  so for storing the user we need to use the hook useState\n   * \n   * now initialise the value as null thus currentUser gets null\n   * \n   */\n  /**\n   * the null value here is for the state and not for the context \n   * context needs another set of initial values as shown above\n   */\n  const [currentUser, setCurrentUser] = useState(null);\n  /**\n   * basically it is the value that we want to pass in the userProvider below\n   * and we are giving it the values of useState \n   * so as the provider allow any it's child components to access the values inside of it's useState \n   */\n  const value = {\n    currentUser,\n    setCurrentUser\n  };\n\n  /**\n   * this provider here is going to recieve the value, which\n   * is going to hold the actual contextural values\n   *   \n   */\n  return /*#__PURE__*/_jsxDEV(UserContext.Provider, {\n    value: value,\n    children: [\" \", children]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 11\n  }, this);\n};\n\n/**\n * well here\n * we are creating this user provider and then we are wrapping around our app or like here children\n * component inside of it \n */\n_s(UserProvider, \"D3+eUn/eYbOcEwoCOjOk5Grmif4=\");\n_c = UserProvider;\nvar _c;\n$RefreshReg$(_c, \"UserProvider\");","map":{"version":3,"names":["createContext","useState","jsxDEV","_jsxDEV","UserContext","currentUser","setCurrentUser","UserProvider","_ref","_s","children","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/purvi/Desktop/react/react-code3/monster-rolodex/src/context/user.context.jsx"],"sourcesContent":["import {createContext,useState} from 'react'\n\n//as the actual value u wanna access\nexport const UserContext = createContext({\n    /**\n     * currentUser being an actual object the empty state of\n     * an object should be null as we want a  null check to define whether or not \n     * we have a user existing object or no object\n     */\n    currentUser: null,\n    /**\n     * it;'s an empty function that does nothing \n     * we are going to set it in the app component itself \n     * as when and how we will require the currentUser \n     */\n    setCurrentUser: () => null,\n});\n//actual component \nexport const UserProvider = ({children}) => {\n    /**\n     * we know that we want to store a user object let's \n     * call it as currentUser\n     *  so for storing the user we need to use the hook useState\n     * \n     * now initialise the value as null thus currentUser gets null\n     * \n     */\n    /**\n     * the null value here is for the state and not for the context \n     * context needs another set of initial values as shown above\n     */\n   const [currentUser, setCurrentUser] = useState(null);\n   /**\n    * basically it is the value that we want to pass in the userProvider below\n    * and we are giving it the values of useState \n    * so as the provider allow any it's child components to access the values inside of it's useState \n    */\n   const value = {currentUser, setCurrentUser};  \n   \n    /**\n     * this provider here is going to recieve the value, which\n     * is going to hold the actual contextural values\n     *   \n     */\n   return <UserContext.Provider value= {value}> {children}</UserContext.Provider>\n}\n\n/**\n * well here\n * we are creating this user provider and then we are wrapping around our app or like here children\n * component inside of it \n */"],"mappings":";;AAAA,SAAQA,aAAa,EAACC,QAAQ,QAAO,OAAO;;AAE5C;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,OAAO,MAAMC,WAAW,gBAAGJ,aAAa,CAAC;EACrC;AACJ;AACA;AACA;AACA;EACIK,WAAW,EAAE,IAAI;EACjB;AACJ;AACA;AACA;AACA;EACIC,cAAc,EAAEA,CAAA,KAAM;AAC1B,CAAC,CAAC;AACF;AACA,OAAO,MAAMC,YAAY,GAAGC,IAAA,IAAgB;EAAAC,EAAA;EAAA,IAAf;IAACC;EAAQ,CAAC,GAAAF,IAAA;EACnC;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EACI;AACJ;AACA;AACA;EACG,MAAM,CAACH,WAAW,EAAEC,cAAc,CAAC,GAAGL,QAAQ,CAAC,IAAI,CAAC;EACpD;AACH;AACA;AACA;AACA;EACG,MAAMU,KAAK,GAAG;IAACN,WAAW;IAAEC;EAAc,CAAC;;EAE1C;AACJ;AACA;AACA;AACA;EACG,oBAAOH,OAAA,CAACC,WAAW,CAACQ,QAAQ;IAACD,KAAK,EAAGA,KAAM;IAAAD,QAAA,GAAC,GAAC,EAACA,QAAQ;EAAA;IAAAG,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAuB,CAAC;AACjF,CAAC;;AAED;AACA;AACA;AACA;AACA;AAJAP,EAAA,CA7BaF,YAAY;AAAAU,EAAA,GAAZV,YAAY;AAAA,IAAAU,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}
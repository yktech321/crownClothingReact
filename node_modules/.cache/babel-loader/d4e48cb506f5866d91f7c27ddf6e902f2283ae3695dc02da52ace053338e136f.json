{"ast":null,"code":"var _jsxFileName = \"/home/purvi/Desktop/react/react-code2/monster-rolodex/src/App.js\",\n  _s = $RefreshSig$();\nimport { useState } from \"react\";\nimport \"./App.css\";\nimport SearchBox from \"./components/searchbox/search-box.component\";\nimport CardList from \"./components/card-list/card-list.component\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  console.log('render');\n  const [searchField, setSearchField] = useState('');\n  console.log(searchField);\n\n  /**\n   * I have console logged out the string render on line eight at the very top of our functional\n  6\n  nent and we're still continuing to log out our search field value.\n  7\n  I want you to think about is whenever right now inside of our application, let's clear this.\n  8\n  I refresh, we see render and then we see the empty string.\n  9\n  ver I type anything, you'll notice that render is getting called first and then the string value\n  10\n  ing called.\n  11\n  this means is that React is running this entire function every single time.\n  12\n  eds to re render a component that is a functional component.\n  13\n  is a very important thing.\n  14\n  eviously, inside of our class components, whenever there were mounting and update cycles, render\n  15\n  uld get run and update cycles ran whenever props changed or whenever state updated.\n  16\n  e only thing that ran though was whatever code was inside of the render method.\n  17\n  th functional components, we don't have a render method.\n  18\n  is entire functional component you can kind of see as the same thing as the render method.\n  19\n  sentially, whenever React has determined that a functional component needs to render or re render,\n  20\n  will just run the entire function top to bottom.\n  21\n  e way that it determines whether or not a functional component needs to update is the same as a class\n  22\n  mponent whenever the props change, which is the arguments inside of a function that we have not worked\n  23\n  th yet, but we will soon.\n  24\n  t just remember that whenever props change, the whole function gets run.\n  25\n  React is determining.\n  26\n  , I need to re render the component.\n  27\n  t me run the entire functional component.\n  28\n  milarly, whenever state changes, it will also rerun this entire functional component.\n  29\n  at is the only way React knows there's probably new UI.\n  30\n  w do I determine what that new UI is going to be?\n  31\n  t me just rerun the entire function so that whatever gets returned from this function is going to\n  32\n  ve the latest variables latest props, latest state values so that I know what the new UI will look\n  33\n  ke based on the returned JS from this function.\n  34\n  is is the thing to remember about functional components.\n  35\n  u cannot just run part of this function.\n  36\n  is whole function needs to rerun every single time.\n    */\n  const onSearchChange = event => {\n    const searchFieldString = event.target.value.toLowerCase();\n    setSearchField(searchFieldString);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"app-title\",\n      children: \"Monsters Rolodex\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(SearchBox, {\n      onChangeHandler: onSearchChange,\n      placeholder: 'search monsters',\n      className: 'monster-search-box'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 117,\n    columnNumber: 5\n  }, this);\n};\n\n/****************************************************** */\n// class App extends Component {\n//   constructor() {\n//     super();\n//     this.state = {\n//       monsters: [],\n//       searchField: '', //an empty string\n//     };\n//   }\n\n//   onSearchChange = (event) => {\n//     const searchField = event.target.value.toLowerCase();\n//     this.setState(\n//       () => {\n//         return {searchField};\n//       }\n//     );\n//   }\n\n//   componentDidMount() {\n//     fetch(\"https://jsonplaceholder.typicode.com/users\")\n//       .then((response) => response.json())\n//       .then((users) => {\n//         this.setState(\n//           () => {\n//             return { monsters: users };\n//           },\n//           () => {\n//             console.log(this.state);\n//           }\n//         );\n//       });\n//   }\n\n//   render() {\n//     const { monsters,searchField } =this.state;\n//     const { onSearchChange } = this;\n//     const filteredMonster = monsters.filter((monster) => {\n//       return monster.name.toLowerCase().includes(searchField); \n//     });\n\n//     return (\n//       <div className=\"App\">\n//         <div className=\"app-title\">Monsters Rolodex</div>\n//         <SearchBox \n//         onChangeHandler= {onSearchChange} \n//         placeholder={'search monsters'}\n//         className= {'monster-search-box'}\n//         />\n//         <CardList monsters={filteredMonster}/>\n//       </div>\n//     );\n//   }\n// }\n_s(App, \"VGd9Bn50RPD7o2JX3FSqKKNwMHU=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useState","SearchBox","CardList","jsxDEV","_jsxDEV","App","_s","console","log","searchField","setSearchField","onSearchChange","event","searchFieldString","target","value","toLowerCase","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onChangeHandler","placeholder","_c","$RefreshReg$"],"sources":["/home/purvi/Desktop/react/react-code2/monster-rolodex/src/App.js"],"sourcesContent":["import { useState } from \"react\";\nimport \"./App.css\";\nimport SearchBox from \"./components/searchbox/search-box.component\";\nimport CardList from \"./components/card-list/card-list.component\";\n\n\nconst App=() =>{\n\n  console.log('render');\n  const[searchField, setSearchField] = useState('');\n  console.log(searchField);\n  \n  /**\n   * I have console logged out the string render on line eight at the very top of our functional\n\n6\nnent and we're still continuing to log out our search field value.\n\n7\nI want you to think about is whenever right now inside of our application, let's clear this.\n\n8\nI refresh, we see render and then we see the empty string.\n\n9\nver I type anything, you'll notice that render is getting called first and then the string value\n\n10\ning called.\n\n11\nthis means is that React is running this entire function every single time.\n\n12\neds to re render a component that is a functional component.\n\n13\nis a very important thing.\n\n14\neviously, inside of our class components, whenever there were mounting and update cycles, render\n\n15\n uld get run and update cycles ran whenever props changed or whenever state updated.\n\n16\n e only thing that ran though was whatever code was inside of the render method.\n\n17\n th functional components, we don't have a render method.\n\n18\n is entire functional component you can kind of see as the same thing as the render method.\n\n19\n sentially, whenever React has determined that a functional component needs to render or re render,\n\n20\n  will just run the entire function top to bottom.\n\n21\n e way that it determines whether or not a functional component needs to update is the same as a class\n\n22\n mponent whenever the props change, which is the arguments inside of a function that we have not worked\n\n23\n th yet, but we will soon.\n\n24\n t just remember that whenever props change, the whole function gets run.\n\n25\n  React is determining.\n\n26\n , I need to re render the component.\n\n27\n t me run the entire functional component.\n\n28\n milarly, whenever state changes, it will also rerun this entire functional component.\n\n29\n at is the only way React knows there's probably new UI.\n\n30\n w do I determine what that new UI is going to be?\n\n31\n t me just rerun the entire function so that whatever gets returned from this function is going to\n\n32\n ve the latest variables latest props, latest state values so that I know what the new UI will look\n\n33\n ke based on the returned JS from this function.\n\n34\n is is the thing to remember about functional components.\n\n35\n u cannot just run part of this function.\n\n36\n is whole function needs to rerun every single time.\n\n   */\n  const onSearchChange= (event) => {\n      const searchFieldString = event.target.value.toLowerCase();\n      setSearchField(searchFieldString);\n  }\n  \n\n  return(\n    <div className=\"App\">\n      <div className=\"app-title\">Monsters Rolodex</div>\n        \n      <SearchBox \n        onChangeHandler= {onSearchChange} \n        placeholder={'search monsters'}\n        className= {'monster-search-box'}\n      />\n      {/* <CardList monsters={filteredMonster}/> */}\n    </div>\n  )\n}\n\n/****************************************************** */\n// class App extends Component {\n//   constructor() {\n//     super();\n//     this.state = {\n//       monsters: [],\n//       searchField: '', //an empty string\n//     };\n//   }\n\n//   onSearchChange = (event) => {\n//     const searchField = event.target.value.toLowerCase();\n//     this.setState(\n//       () => {\n//         return {searchField};\n//       }\n//     );\n//   }\n\n//   componentDidMount() {\n//     fetch(\"https://jsonplaceholder.typicode.com/users\")\n//       .then((response) => response.json())\n//       .then((users) => {\n//         this.setState(\n//           () => {\n//             return { monsters: users };\n//           },\n//           () => {\n//             console.log(this.state);\n//           }\n//         );\n//       });\n//   }\n\n//   render() {\n//     const { monsters,searchField } =this.state;\n//     const { onSearchChange } = this;\n//     const filteredMonster = monsters.filter((monster) => {\n//       return monster.name.toLowerCase().includes(searchField); \n//     });\n\n//     return (\n//       <div className=\"App\">\n//         <div className=\"app-title\">Monsters Rolodex</div>\n//         <SearchBox \n//         onChangeHandler= {onSearchChange} \n//         placeholder={'search monsters'}\n//         className= {'monster-search-box'}\n//         />\n//         <CardList monsters={filteredMonster}/>\n//       </div>\n//     );\n//   }\n// }\nexport default App;"],"mappings":";;AAAA,SAASA,QAAQ,QAAQ,OAAO;AAChC,OAAO,WAAW;AAClB,OAAOC,SAAS,MAAM,6CAA6C;AACnE,OAAOC,QAAQ,MAAM,4CAA4C;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAGlE,MAAMC,GAAG,GAACA,CAAA,KAAK;EAAAC,EAAA;EAEbC,OAAO,CAACC,GAAG,CAAC,QAAQ,CAAC;EACrB,MAAK,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EACjDO,OAAO,CAACC,GAAG,CAACC,WAAW,CAAC;;EAExB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EAiCE,MAAME,cAAc,GAAGC,KAAK,IAAK;IAC7B,MAAMC,iBAAiB,GAAGD,KAAK,CAACE,MAAM,CAACC,KAAK,CAACC,WAAW,CAAC,CAAC;IAC1DN,cAAc,CAACG,iBAAiB,CAAC;EACrC,CAAC;EAGD,oBACET,OAAA;IAAKa,SAAS,EAAC,KAAK;IAAAC,QAAA,gBAClBd,OAAA;MAAKa,SAAS,EAAC,WAAW;MAAAC,QAAA,EAAC;IAAgB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,eAEjDlB,OAAA,CAACH,SAAS;MACRsB,eAAe,EAAGZ,cAAe;MACjCa,WAAW,EAAE,iBAAkB;MAC/BP,SAAS,EAAG;IAAqB;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAClC,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAEC,CAAC;AAEV,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAAhB,EAAA,CAhLMD,GAAG;AAAAoB,EAAA,GAAHpB,GAAG;AAiLT,eAAeA,GAAG;AAAC,IAAAoB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}
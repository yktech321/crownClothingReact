{"ast":null,"code":"var _jsxFileName = \"/home/purvi/Desktop/react/react-code2/monster-rolodex/src/App.js\",\n  _s = $RefreshSig$();\nimport { useState } from \"react\";\nimport \"./App.css\";\nimport SearchBox from \"./components/searchbox/search-box.component\";\nimport CardList from \"./components/card-list/card-list.component\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  console.log('render');\n  const [searchField, setSearchField] = useState('');\n  console.log(searchField);\n\n  /**\n   * I have console logged out the string render on line eight at the very top of our functional\n   *component and we're still continuing to log out our search field value.\n   *What I want you to think about is whenever right now inside of our application, let's clear this.\n   *When I refresh, we see render and then we see the empty string.\n   *Whenever I type anything, you'll notice that render is getting called first and then the string value\n   *is being called.\n   *What this means is that React is running this entire function every single time.\n   *It needs to re render a component that is a functional component.\n   *This is a very important thing.\n   *Previously, inside of our class components, whenever there were mounting and update cycles, render\n   *would get run and update cycles ran whenever props changed or whenever state updated.\n   *The only thing that ran though was whatever code was inside of the render method.\n   *With functional components, we don't have a render method.\n   *This entire functional component you can kind of see as the same thing as the render method.\n   *Essentially, whenever React has determined that a functional component needs to render or re render,\n   *it will just run the entire function top to bottom.\n   *The way that it determines whether or not a functional component needs to update is the same as a class\n   *component whenever the props change, which is the arguments inside of a function that we have not worked\n   *with yet, but we will soon.\n   *But just remember that whenever props change, the whole function gets run.\n   *So React is determining.\n   *Oh, I need to re render the component.\n   *Let me run the entire functional component.\n   *Similarly, whenever state changes, it will also rerun this entire functional component.\n   *That is the only way React knows there's probably new UI.\n   *How do I determine what that new UI is going to be?\n   *Let me just rerun the entire function so that whatever gets returned from this function is going to\n   *have the latest variables latest props, latest state values so that I know what the new UI will look\n   *like based on the returned JS from this function.\n   *This is the thing to remember about functional components.\n   *You cannot just run part of this function.\n   *This whole function needs to rerun every single time.\n   */\n\n  /**\n   * now with useState the re\n   */\n  const onSearchChange = event => {\n    const searchFieldString = event.target.value.toLowerCase();\n    setSearchField(searchFieldString);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"app-title\",\n      children: \"Monsters Rolodex\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(SearchBox, {\n      onChangeHandler: onSearchChange,\n      placeholder: 'search monsters',\n      className: 'monster-search-box'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 5\n  }, this);\n};\n\n/****************************************************** */\n// class App extends Component {\n//   constructor() {\n//     super();\n//     this.state = {\n//       monsters: [],\n//       searchField: '', //an empty string\n//     };\n//   }\n\n//   onSearchChange = (event) => {\n//     const searchField = event.target.value.toLowerCase();\n//     this.setState(\n//       () => {\n//         return {searchField};\n//       }\n//     );\n//   }\n\n//   componentDidMount() {\n//     fetch(\"https://jsonplaceholder.typicode.com/users\")\n//       .then((response) => response.json())\n//       .then((users) => {\n//         this.setState(\n//           () => {\n//             return { monsters: users };\n//           },\n//           () => {\n//             console.log(this.state);\n//           }\n//         );\n//       });\n//   }\n\n//   render() {\n//     const { monsters,searchField } =this.state;\n//     const { onSearchChange } = this;\n//     const filteredMonster = monsters.filter((monster) => {\n//       return monster.name.toLowerCase().includes(searchField); \n//     });\n\n//     return (\n//       <div className=\"App\">\n//         <div className=\"app-title\">Monsters Rolodex</div>\n//         <SearchBox \n//         onChangeHandler= {onSearchChange} \n//         placeholder={'search monsters'}\n//         className= {'monster-search-box'}\n//         />\n//         <CardList monsters={filteredMonster}/>\n//       </div>\n//     );\n//   }\n// }\n_s(App, \"VGd9Bn50RPD7o2JX3FSqKKNwMHU=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useState","SearchBox","CardList","jsxDEV","_jsxDEV","App","_s","console","log","searchField","setSearchField","onSearchChange","event","searchFieldString","target","value","toLowerCase","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onChangeHandler","placeholder","_c","$RefreshReg$"],"sources":["/home/purvi/Desktop/react/react-code2/monster-rolodex/src/App.js"],"sourcesContent":["import { useState } from \"react\";\nimport \"./App.css\";\nimport SearchBox from \"./components/searchbox/search-box.component\";\nimport CardList from \"./components/card-list/card-list.component\";\n\n\nconst App=() =>{\n\n  console.log('render');\n  const[searchField, setSearchField] = useState('');\n  console.log(searchField);\n\n  \n  /**\n   * I have console logged out the string render on line eight at the very top of our functional\n   *component and we're still continuing to log out our search field value.\n   *What I want you to think about is whenever right now inside of our application, let's clear this.\n   *When I refresh, we see render and then we see the empty string.\n   *Whenever I type anything, you'll notice that render is getting called first and then the string value\n   *is being called.\n   *What this means is that React is running this entire function every single time.\n   *It needs to re render a component that is a functional component.\n   *This is a very important thing.\n   *Previously, inside of our class components, whenever there were mounting and update cycles, render\n   *would get run and update cycles ran whenever props changed or whenever state updated.\n   *The only thing that ran though was whatever code was inside of the render method.\n   *With functional components, we don't have a render method.\n   *This entire functional component you can kind of see as the same thing as the render method.\n   *Essentially, whenever React has determined that a functional component needs to render or re render,\n   *it will just run the entire function top to bottom.\n   *The way that it determines whether or not a functional component needs to update is the same as a class\n   *component whenever the props change, which is the arguments inside of a function that we have not worked\n   *with yet, but we will soon.\n   *But just remember that whenever props change, the whole function gets run.\n   *So React is determining.\n   *Oh, I need to re render the component.\n   *Let me run the entire functional component.\n   *Similarly, whenever state changes, it will also rerun this entire functional component.\n   *That is the only way React knows there's probably new UI.\n   *How do I determine what that new UI is going to be?\n   *Let me just rerun the entire function so that whatever gets returned from this function is going to\n   *have the latest variables latest props, latest state values so that I know what the new UI will look\n   *like based on the returned JS from this function.\n   *This is the thing to remember about functional components.\n   *You cannot just run part of this function.\n   *This whole function needs to rerun every single time.\n   */\n\n  /**\n   * now with useState the re\n   */\n  const onSearchChange= (event) => {\n      const searchFieldString = event.target.value.toLowerCase();\n      setSearchField(searchFieldString);\n  }\n  \n\n  return(\n    <div className=\"App\">\n      <div className=\"app-title\">Monsters Rolodex</div>\n        \n      <SearchBox \n        onChangeHandler= {onSearchChange} \n        placeholder={'search monsters'}\n        className= {'monster-search-box'}\n      />\n      {/* <CardList monsters={filteredMonster}/> */}\n    </div>\n  )\n}\n\n/****************************************************** */\n// class App extends Component {\n//   constructor() {\n//     super();\n//     this.state = {\n//       monsters: [],\n//       searchField: '', //an empty string\n//     };\n//   }\n\n//   onSearchChange = (event) => {\n//     const searchField = event.target.value.toLowerCase();\n//     this.setState(\n//       () => {\n//         return {searchField};\n//       }\n//     );\n//   }\n\n//   componentDidMount() {\n//     fetch(\"https://jsonplaceholder.typicode.com/users\")\n//       .then((response) => response.json())\n//       .then((users) => {\n//         this.setState(\n//           () => {\n//             return { monsters: users };\n//           },\n//           () => {\n//             console.log(this.state);\n//           }\n//         );\n//       });\n//   }\n\n//   render() {\n//     const { monsters,searchField } =this.state;\n//     const { onSearchChange } = this;\n//     const filteredMonster = monsters.filter((monster) => {\n//       return monster.name.toLowerCase().includes(searchField); \n//     });\n\n//     return (\n//       <div className=\"App\">\n//         <div className=\"app-title\">Monsters Rolodex</div>\n//         <SearchBox \n//         onChangeHandler= {onSearchChange} \n//         placeholder={'search monsters'}\n//         className= {'monster-search-box'}\n//         />\n//         <CardList monsters={filteredMonster}/>\n//       </div>\n//     );\n//   }\n// }\nexport default App;"],"mappings":";;AAAA,SAASA,QAAQ,QAAQ,OAAO;AAChC,OAAO,WAAW;AAClB,OAAOC,SAAS,MAAM,6CAA6C;AACnE,OAAOC,QAAQ,MAAM,4CAA4C;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAGlE,MAAMC,GAAG,GAACA,CAAA,KAAK;EAAAC,EAAA;EAEbC,OAAO,CAACC,GAAG,CAAC,QAAQ,CAAC;EACrB,MAAK,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EACjDO,OAAO,CAACC,GAAG,CAACC,WAAW,CAAC;;EAGxB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAEE;AACF;AACA;EACE,MAAME,cAAc,GAAGC,KAAK,IAAK;IAC7B,MAAMC,iBAAiB,GAAGD,KAAK,CAACE,MAAM,CAACC,KAAK,CAACC,WAAW,CAAC,CAAC;IAC1DN,cAAc,CAACG,iBAAiB,CAAC;EACrC,CAAC;EAGD,oBACET,OAAA;IAAKa,SAAS,EAAC,KAAK;IAAAC,QAAA,gBAClBd,OAAA;MAAKa,SAAS,EAAC,WAAW;MAAAC,QAAA,EAAC;IAAgB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,eAEjDlB,OAAA,CAACH,SAAS;MACRsB,eAAe,EAAGZ,cAAe;MACjCa,WAAW,EAAE,iBAAkB;MAC/BP,SAAS,EAAG;IAAqB;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAClC,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAEC,CAAC;AAEV,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAAhB,EAAA,CAtHMD,GAAG;AAAAoB,EAAA,GAAHpB,GAAG;AAuHT,eAAeA,GAAG;AAAC,IAAAoB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}
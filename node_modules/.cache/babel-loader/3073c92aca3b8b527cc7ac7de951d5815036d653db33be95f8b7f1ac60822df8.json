{"ast":null,"code":"var _jsxFileName = \"/home/purvi/Desktop/react/react-code2/monster-rolodex/src/App.js\",\n  _s = $RefreshSig$();\nimport { useState } from \"react\";\nimport \"./App.css\";\nimport SearchBox from \"./components/searchbox/search-box.component\";\nimport CardList from \"./components/card-list/card-list.component\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  console.log('render');\n  const [searchField, setSearchField] = useState('');\n  console.log(searchField);\n\n  /**\n   * I have console logged out the string render on line eight at the very top of our functional\n  6\n  00:00:20,010 --> 00:00:23,880\n  ‫component and we're still continuing to log out our search field value.\n  7\n  00:00:24,180 --> 00:00:30,990\n  ‫What I want you to think about is whenever right now inside of our application, let's clear this.\n  8\n  00:00:31,950 --> 00:00:35,640\n  ‫When I refresh, we see render and then we see the empty string.\n  9\n  00:00:36,350 --> 00:00:44,180\n  ‫Whenever I type anything, you'll notice that render is getting called first and then the string value\n  10\n  00:00:44,180 --> 00:00:45,050\n  ‫is being called.\n  11\n  00:00:45,620 --> 00:00:52,700\n  ‫What this means is that React is running this entire function every single time.\n  12\n  00:00:52,700 --> 00:00:57,290\n  ‫It needs to re render a component that is a functional component.\n  13\n  00:00:57,470 --> 00:00:59,240\n  ‫This is a very important thing.\n  14\n  00:00:59,630 --> 00:01:06,650\n  ‫Previously, inside of our class components, whenever there were mounting and update cycles, render\n  15\n  00:01:06,650 --> 00:01:12,920\n  ‫would get run and update cycles ran whenever props changed or whenever state updated.\n  16\n  00:01:13,630 --> 00:01:18,730\n  ‫The only thing that ran though was whatever code was inside of the render method.\n  17\n  00:01:19,270 --> 00:01:22,330\n  ‫With functional components, we don't have a render method.\n  18\n  00:01:22,360 --> 00:01:28,210\n  ‫This entire functional component you can kind of see as the same thing as the render method.\n  19\n  00:01:28,450 --> 00:01:35,350\n  ‫Essentially, whenever React has determined that a functional component needs to render or re render,\n  20\n  00:01:35,350 --> 00:01:38,860\n  ‫it will just run the entire function top to bottom.\n  21\n  00:01:39,820 --> 00:01:45,040\n  ‫The way that it determines whether or not a functional component needs to update is the same as a class\n  22\n  00:01:45,040 --> 00:01:51,040\n  ‫component whenever the props change, which is the arguments inside of a function that we have not worked\n  23\n  00:01:51,040 --> 00:01:52,120\n  ‫with yet, but we will soon.\n  24\n  00:01:52,120 --> 00:01:55,600\n  ‫But just remember that whenever props change, the whole function gets run.\n  25\n  00:01:55,600 --> 00:01:56,620\n  ‫So React is determining.\n  26\n  00:01:56,620 --> 00:01:58,450\n  ‫Oh, I need to re render the component.\n  27\n  00:01:58,450 --> 00:02:00,880\n  ‫Let me run the entire functional component.\n  28\n  00:02:01,240 --> 00:02:08,040\n  ‫Similarly, whenever state changes, it will also rerun this entire functional component.\n  29\n  00:02:08,050 --> 00:02:11,950\n  ‫That is the only way React knows there's probably new UI.\n  30\n  00:02:11,980 --> 00:02:15,100\n  ‫How do I determine what that new UI is going to be?\n  31\n  00:02:15,100 --> 00:02:21,610\n  ‫Let me just rerun the entire function so that whatever gets returned from this function is going to\n  32\n  00:02:21,610 --> 00:02:27,100\n  ‫have the latest variables latest props, latest state values so that I know what the new UI will look\n  33\n  00:02:27,100 --> 00:02:30,790\n  ‫like based on the returned JS from this function.\n  34\n  00:02:31,090 --> 00:02:33,490\n  ‫This is the thing to remember about functional components.\n  35\n  00:02:33,490 --> 00:02:35,170\n  ‫You cannot just run part of this function.\n  36\n  00:02:35,170 --> 00:02:38,230\n  ‫This whole function needs to rerun every single time.\n    */\n  const onSearchChange = event => {\n    const searchFieldString = event.target.value.toLowerCase();\n    setSearchField(searchFieldString);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"app-title\",\n      children: \"Monsters Rolodex\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(SearchBox, {\n      onChangeHandler: onSearchChange,\n      placeholder: 'search monsters',\n      className: 'monster-search-box'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 148,\n    columnNumber: 5\n  }, this);\n};\n\n/****************************************************** */\n// class App extends Component {\n//   constructor() {\n//     super();\n//     this.state = {\n//       monsters: [],\n//       searchField: '', //an empty string\n//     };\n//   }\n\n//   onSearchChange = (event) => {\n//     const searchField = event.target.value.toLowerCase();\n//     this.setState(\n//       () => {\n//         return {searchField};\n//       }\n//     );\n//   }\n\n//   componentDidMount() {\n//     fetch(\"https://jsonplaceholder.typicode.com/users\")\n//       .then((response) => response.json())\n//       .then((users) => {\n//         this.setState(\n//           () => {\n//             return { monsters: users };\n//           },\n//           () => {\n//             console.log(this.state);\n//           }\n//         );\n//       });\n//   }\n\n//   render() {\n//     const { monsters,searchField } =this.state;\n//     const { onSearchChange } = this;\n//     const filteredMonster = monsters.filter((monster) => {\n//       return monster.name.toLowerCase().includes(searchField); \n//     });\n\n//     return (\n//       <div className=\"App\">\n//         <div className=\"app-title\">Monsters Rolodex</div>\n//         <SearchBox \n//         onChangeHandler= {onSearchChange} \n//         placeholder={'search monsters'}\n//         className= {'monster-search-box'}\n//         />\n//         <CardList monsters={filteredMonster}/>\n//       </div>\n//     );\n//   }\n// }\n_s(App, \"VGd9Bn50RPD7o2JX3FSqKKNwMHU=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useState","SearchBox","CardList","jsxDEV","_jsxDEV","App","_s","console","log","searchField","setSearchField","onSearchChange","event","searchFieldString","target","value","toLowerCase","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onChangeHandler","placeholder","_c","$RefreshReg$"],"sources":["/home/purvi/Desktop/react/react-code2/monster-rolodex/src/App.js"],"sourcesContent":["import { useState } from \"react\";\nimport \"./App.css\";\nimport SearchBox from \"./components/searchbox/search-box.component\";\nimport CardList from \"./components/card-list/card-list.component\";\n\n\nconst App=() =>{\n\n  console.log('render');\n  const[searchField, setSearchField] = useState('');\n  console.log(searchField);\n  \n  /**\n   * I have console logged out the string render on line eight at the very top of our functional\n\n6\n00:00:20,010 --> 00:00:23,880\n‫component and we're still continuing to log out our search field value.\n\n7\n00:00:24,180 --> 00:00:30,990\n‫What I want you to think about is whenever right now inside of our application, let's clear this.\n\n8\n00:00:31,950 --> 00:00:35,640\n‫When I refresh, we see render and then we see the empty string.\n\n9\n00:00:36,350 --> 00:00:44,180\n‫Whenever I type anything, you'll notice that render is getting called first and then the string value\n\n10\n00:00:44,180 --> 00:00:45,050\n‫is being called.\n\n11\n00:00:45,620 --> 00:00:52,700\n‫What this means is that React is running this entire function every single time.\n\n12\n00:00:52,700 --> 00:00:57,290\n‫It needs to re render a component that is a functional component.\n\n13\n00:00:57,470 --> 00:00:59,240\n‫This is a very important thing.\n\n14\n00:00:59,630 --> 00:01:06,650\n‫Previously, inside of our class components, whenever there were mounting and update cycles, render\n\n15\n00:01:06,650 --> 00:01:12,920\n‫would get run and update cycles ran whenever props changed or whenever state updated.\n\n16\n00:01:13,630 --> 00:01:18,730\n‫The only thing that ran though was whatever code was inside of the render method.\n\n17\n00:01:19,270 --> 00:01:22,330\n‫With functional components, we don't have a render method.\n\n18\n00:01:22,360 --> 00:01:28,210\n‫This entire functional component you can kind of see as the same thing as the render method.\n\n19\n00:01:28,450 --> 00:01:35,350\n‫Essentially, whenever React has determined that a functional component needs to render or re render,\n\n20\n00:01:35,350 --> 00:01:38,860\n‫it will just run the entire function top to bottom.\n\n21\n00:01:39,820 --> 00:01:45,040\n‫The way that it determines whether or not a functional component needs to update is the same as a class\n\n22\n00:01:45,040 --> 00:01:51,040\n‫component whenever the props change, which is the arguments inside of a function that we have not worked\n\n23\n00:01:51,040 --> 00:01:52,120\n‫with yet, but we will soon.\n\n24\n00:01:52,120 --> 00:01:55,600\n‫But just remember that whenever props change, the whole function gets run.\n\n25\n00:01:55,600 --> 00:01:56,620\n‫So React is determining.\n\n26\n00:01:56,620 --> 00:01:58,450\n‫Oh, I need to re render the component.\n\n27\n00:01:58,450 --> 00:02:00,880\n‫Let me run the entire functional component.\n\n28\n00:02:01,240 --> 00:02:08,040\n‫Similarly, whenever state changes, it will also rerun this entire functional component.\n\n29\n00:02:08,050 --> 00:02:11,950\n‫That is the only way React knows there's probably new UI.\n\n30\n00:02:11,980 --> 00:02:15,100\n‫How do I determine what that new UI is going to be?\n\n31\n00:02:15,100 --> 00:02:21,610\n‫Let me just rerun the entire function so that whatever gets returned from this function is going to\n\n32\n00:02:21,610 --> 00:02:27,100\n‫have the latest variables latest props, latest state values so that I know what the new UI will look\n\n33\n00:02:27,100 --> 00:02:30,790\n‫like based on the returned JS from this function.\n\n34\n00:02:31,090 --> 00:02:33,490\n‫This is the thing to remember about functional components.\n\n35\n00:02:33,490 --> 00:02:35,170\n‫You cannot just run part of this function.\n\n36\n00:02:35,170 --> 00:02:38,230\n‫This whole function needs to rerun every single time.\n\n   */\n  const onSearchChange= (event) => {\n      const searchFieldString = event.target.value.toLowerCase();\n      setSearchField(searchFieldString);\n  }\n  \n\n  return(\n    <div className=\"App\">\n      <div className=\"app-title\">Monsters Rolodex</div>\n        \n      <SearchBox \n        onChangeHandler= {onSearchChange} \n        placeholder={'search monsters'}\n        className= {'monster-search-box'}\n      />\n      {/* <CardList monsters={filteredMonster}/> */}\n    </div>\n  )\n}\n\n/****************************************************** */\n// class App extends Component {\n//   constructor() {\n//     super();\n//     this.state = {\n//       monsters: [],\n//       searchField: '', //an empty string\n//     };\n//   }\n\n//   onSearchChange = (event) => {\n//     const searchField = event.target.value.toLowerCase();\n//     this.setState(\n//       () => {\n//         return {searchField};\n//       }\n//     );\n//   }\n\n//   componentDidMount() {\n//     fetch(\"https://jsonplaceholder.typicode.com/users\")\n//       .then((response) => response.json())\n//       .then((users) => {\n//         this.setState(\n//           () => {\n//             return { monsters: users };\n//           },\n//           () => {\n//             console.log(this.state);\n//           }\n//         );\n//       });\n//   }\n\n//   render() {\n//     const { monsters,searchField } =this.state;\n//     const { onSearchChange } = this;\n//     const filteredMonster = monsters.filter((monster) => {\n//       return monster.name.toLowerCase().includes(searchField); \n//     });\n\n//     return (\n//       <div className=\"App\">\n//         <div className=\"app-title\">Monsters Rolodex</div>\n//         <SearchBox \n//         onChangeHandler= {onSearchChange} \n//         placeholder={'search monsters'}\n//         className= {'monster-search-box'}\n//         />\n//         <CardList monsters={filteredMonster}/>\n//       </div>\n//     );\n//   }\n// }\nexport default App;"],"mappings":";;AAAA,SAASA,QAAQ,QAAQ,OAAO;AAChC,OAAO,WAAW;AAClB,OAAOC,SAAS,MAAM,6CAA6C;AACnE,OAAOC,QAAQ,MAAM,4CAA4C;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAGlE,MAAMC,GAAG,GAACA,CAAA,KAAK;EAAAC,EAAA;EAEbC,OAAO,CAACC,GAAG,CAAC,QAAQ,CAAC;EACrB,MAAK,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EACjDO,OAAO,CAACC,GAAG,CAACC,WAAW,CAAC;;EAExB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EAiCE,MAAME,cAAc,GAAGC,KAAK,IAAK;IAC7B,MAAMC,iBAAiB,GAAGD,KAAK,CAACE,MAAM,CAACC,KAAK,CAACC,WAAW,CAAC,CAAC;IAC1DN,cAAc,CAACG,iBAAiB,CAAC;EACrC,CAAC;EAGD,oBACET,OAAA;IAAKa,SAAS,EAAC,KAAK;IAAAC,QAAA,gBAClBd,OAAA;MAAKa,SAAS,EAAC,WAAW;MAAAC,QAAA,EAAC;IAAgB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,eAEjDlB,OAAA,CAACH,SAAS;MACRsB,eAAe,EAAGZ,cAAe;MACjCa,WAAW,EAAE,iBAAkB;MAC/BP,SAAS,EAAG;IAAqB;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAClC,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAEC,CAAC;AAEV,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAAhB,EAAA,CA/MMD,GAAG;AAAAoB,EAAA,GAAHpB,GAAG;AAgNT,eAAeA,GAAG;AAAC,IAAAoB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}
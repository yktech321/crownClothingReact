{"ast":null,"code":"var _jsxFileName = \"/home/purvi/Desktop/react/react-code2/monster-rolodex/src/App.js\";\nimport { Component } from \"react\";\nimport \"./App.css\";\nimport SearchBox from \"./components/searchbox/search-box.component\";\nimport CardList from \"./components/card-list/card-list.component\";\n\n//functional component is typically in form of arrow function \n/**\n * we are going to replicate class App \n * as const App and then we need a function\n * you don't need the constructor lifecycle method or render \n * \n * in this particular case the function is pure\n * i.e. react gonna run it from top to bottom \n * \n * whatever's gonna be returned from this function \n * is gonna be the UI like render so let's copy all that \n * was in the return of render \n *\n * that is all we need if we have all the variables \n * in our case we don't so let's comment out all the \n * components except h2  \n *\n * and also comment out the app class because both are \n * in conflict to each other \n */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"app-title\",\n      children: \"Monsters Rolodex\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 5\n  }, this);\n};\n\n/**\n * as you can see their is no constructor \n * or any class methods so this above acts like \n * a regular js function\n * \n * it takes some arguments and then returns something\n * \n * in here a react functional component takes arguments\n * that ar the props of this h2 component and then it\n * rturns the jsx in the return \n * \n * react: u gave me this function i'm just gonna run it and \n * return the html which is inside it \n * \n * functional component does not go through lifecycle methods \n * it's completely different mental model \n * \n * u need to think about them in terms of \n * functions and side effects\n * \n * in order for us to understand setState and all \n * the other methods we need to understand\n * pure function, impure and side effects \n *   \n */\n\n/********************** */\n/**\n * pure func\n * cons purefunc =  (a,b) => {\n *  return a+b;\n * }\n * \n * impure\n * let c=3;\n * const funcA = (a,b) => {\n *  return a + b + c;\n * }\n * \n * side-effect\n * c=3\n * const funcB= (a,b) => {\n */\n// class App extends Component {\n//   constructor() {\n//     super();\n//     this.state = {\n//       monsters: [],\n//       searchField: '', //an empty string\n//     };\n//   }\n\n//   onSearchChange = (event) => {\n//     const searchField = event.target.value.toLowerCase();\n//     this.setState(\n//       () => {\n//         return {searchField};\n//       }\n//     );\n//   }\n\n//   componentDidMount() {\n//     fetch(\"https://jsonplaceholder.typicode.com/users\")\n//       .then((response) => response.json())\n//       .then((users) => {\n//         this.setState(\n//           () => {\n//             return { monsters: users };\n//           },\n//           () => {\n//             console.log(this.state);\n//           }\n//         );\n//       });\n//   }\n\n//   render() {\n//     const { monsters,searchField } =this.state;\n//     const { onSearchChange } = this;\n//     const filteredMonster = monsters.filter((monster) => {\n//       return monster.name.toLowerCase().includes(searchField); \n//     });\n\n//     return (\n//       <div className=\"App\">\n//         <div className=\"app-title\">Monsters Rolodex</div>\n//         <SearchBox \n//         onChangeHandler= {onSearchChange} \n//         placeholder={'search monsters'}\n//         className= {'monster-search-box'}\n//         />\n//         <CardList monsters={filteredMonster}/>\n//       </div>\n//     );\n//   }\n// }\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["Component","SearchBox","CardList","jsxDEV","_jsxDEV","App","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/purvi/Desktop/react/react-code2/monster-rolodex/src/App.js"],"sourcesContent":["import { Component } from \"react\";\nimport \"./App.css\";\nimport SearchBox from \"./components/searchbox/search-box.component\";\nimport CardList from \"./components/card-list/card-list.component\";\n\n//functional component is typically in form of arrow function \n/**\n * we are going to replicate class App \n * as const App and then we need a function\n * you don't need the constructor lifecycle method or render \n * \n * in this particular case the function is pure\n * i.e. react gonna run it from top to bottom \n * \n * whatever's gonna be returned from this function \n * is gonna be the UI like render so let's copy all that \n * was in the return of render \n *\n * that is all we need if we have all the variables \n * in our case we don't so let's comment out all the \n * components except h2  \n *\n * and also comment out the app class because both are \n * in conflict to each other \n */\nconst App=() =>{\n\n  return(\n    <div className=\"App\">\n      <div className=\"app-title\">Monsters Rolodex</div>\n     \n      {/* <SearchBox \n      onChangeHandler= {onSearchChange} \n      placeholder={'search monsters'}\n      className= {'monster-search-box'}\n      />\n      <CardList monsters={filteredMonster}/> */}\n    </div>\n  )\n}\n\n/**\n * as you can see their is no constructor \n * or any class methods so this above acts like \n * a regular js function\n * \n * it takes some arguments and then returns something\n * \n * in here a react functional component takes arguments\n * that ar the props of this h2 component and then it\n * rturns the jsx in the return \n * \n * react: u gave me this function i'm just gonna run it and \n * return the html which is inside it \n * \n * functional component does not go through lifecycle methods \n * it's completely different mental model \n * \n * u need to think about them in terms of \n * functions and side effects\n * \n * in order for us to understand setState and all \n * the other methods we need to understand\n * pure function, impure and side effects \n *   \n */\n\n/********************** */\n/**\n * pure func\n * cons purefunc =  (a,b) => {\n *  return a+b;\n * }\n * \n * impure\n * let c=3;\n * const funcA = (a,b) => {\n *  return a + b + c;\n * }\n * \n * side-effect\n * c=3\n * const funcB= (a,b) => {\n */\n// class App extends Component {\n//   constructor() {\n//     super();\n//     this.state = {\n//       monsters: [],\n//       searchField: '', //an empty string\n//     };\n//   }\n\n//   onSearchChange = (event) => {\n//     const searchField = event.target.value.toLowerCase();\n//     this.setState(\n//       () => {\n//         return {searchField};\n//       }\n//     );\n//   }\n\n//   componentDidMount() {\n//     fetch(\"https://jsonplaceholder.typicode.com/users\")\n//       .then((response) => response.json())\n//       .then((users) => {\n//         this.setState(\n//           () => {\n//             return { monsters: users };\n//           },\n//           () => {\n//             console.log(this.state);\n//           }\n//         );\n//       });\n//   }\n\n//   render() {\n//     const { monsters,searchField } =this.state;\n//     const { onSearchChange } = this;\n//     const filteredMonster = monsters.filter((monster) => {\n//       return monster.name.toLowerCase().includes(searchField); \n//     });\n\n//     return (\n//       <div className=\"App\">\n//         <div className=\"app-title\">Monsters Rolodex</div>\n//         <SearchBox \n//         onChangeHandler= {onSearchChange} \n//         placeholder={'search monsters'}\n//         className= {'monster-search-box'}\n//         />\n//         <CardList monsters={filteredMonster}/>\n//       </div>\n//     );\n//   }\n// }\nexport default App;"],"mappings":";AAAA,SAASA,SAAS,QAAQ,OAAO;AACjC,OAAO,WAAW;AAClB,OAAOC,SAAS,MAAM,6CAA6C;AACnE,OAAOC,QAAQ,MAAM,4CAA4C;;AAEjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAlBA,SAAAC,MAAA,IAAAC,OAAA;AAmBA,MAAMC,GAAG,GAACA,CAAA,KAAK;EAEb,oBACED,OAAA;IAAKE,SAAS,EAAC,KAAK;IAAAC,QAAA,eAClBH,OAAA;MAAKE,SAAS,EAAC,WAAW;MAAAC,QAAA,EAAC;IAAgB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAQ9C,CAAC;AAEV,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAAC,EAAA,GA/GMP,GAAG;AAgHT,eAAeA,GAAG;AAAC,IAAAO,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}
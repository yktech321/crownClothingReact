{"ast":null,"code":"var _jsxFileName = \"/home/purvi/Desktop/react/react-code2/monster-rolodex/src/App.js\";\n/**it's a hook that give us ability to \n * convert a local state into a functional component \n * it's used in place of setState \n */\nimport { useState } from \"react\";\nimport \"./App.css\";\nimport SearchBox from \"./components/searchbox/search-box.component\";\nimport CardList from \"./components/card-list/card-list.component\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  var _s = $RefreshSig$();\n  onSearchChange = _s(event => {\n    _s();\n    /**now here searchField is not as it used to be in class\n     * because setState is not here the same as it was in class \n     * \n     * so we have to do something new here \n     * \n     * using array destructuring\n     * const arr = [2,4];\n     * const [a,b]= arr;\n     * a=2;\n     * b=4;\n     * \n     * similar to that we are going to do it using hook useState \n     * we are also going to not import component as we no longer need it\n     * \n     * now similar to above array destructuring example\n     * useState gives us an array of two values \n     * [value,setValue]\n     *    --> value is of the one that we want to store\n     *    --> setValue is gonna be a set or a function\n     * \n     * now state was an object in class component\n     * that could contain multiple values  \n     *this.state = {\n        monsters: [],\n        searchField: '', //an empty string\n      };\n      * now state here is similar to the value \n     * but like object they can not take multiple values \n     * so here they are individual values\n     * if we want to take multiple values we need to use this hook \n     * multiple times  \n     * \n     * now here setValue \n     * is the function telling how the value must change \n     * \n     * and in useState value changes completely while in\n     * setState it used to update \n    */\n    const [searchField, setSearchField] = useState('');\n    /**\n     * well this searchField above is not same as the one below\n     * the one below is just the string we recive from the target\\\n     * so let's change it's name to denote the difference  \n    */\n    // const searchField = event.target.value.toLowerCase();\n\n    const searchFieldString = event.target.value.toLowerCase();\n    setSearchField(searchFieldString);\n    // this.setState(\n    //   () => {\n    //     return {searchField};\n    //   }\n    // );\n    // now we haven't used searchField for anything here earlier used to \n  }, \"VGd9Bn50RPD7o2JX3FSqKKNwMHU=\");\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"app-title\",\n      children: \"Monsters Rolodex\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(SearchBox, {\n      onChangeHandler: onSearchChange /**now onSearchChange is function just like before */,\n      placeholder: 'search monsters',\n      className: 'monster-search-box'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 5\n  }, this);\n};\n\n/****************************************************** */\n// class App extends Component {\n//   constructor() {\n//     super();\n//     this.state = {\n//       monsters: [],\n//       searchField: '', //an empty string\n//     };\n//   }\n\n//   onSearchChange = (event) => {\n//     const searchField = event.target.value.toLowerCase();\n//     this.setState(\n//       () => {\n//         return {searchField};\n//       }\n//     );\n//   }\n\n//   componentDidMount() {\n//     fetch(\"https://jsonplaceholder.typicode.com/users\")\n//       .then((response) => response.json())\n//       .then((users) => {\n//         this.setState(\n//           () => {\n//             return { monsters: users };\n//           },\n//           () => {\n//             console.log(this.state);\n//           }\n//         );\n//       });\n//   }\n\n//   render() {\n//     const { monsters,searchField } =this.state;\n//     const { onSearchChange } = this;\n//     const filteredMonster = monsters.filter((monster) => {\n//       return monster.name.toLowerCase().includes(searchField); \n//     });\n\n//     return (\n//       <div className=\"App\">\n//         <div className=\"app-title\">Monsters Rolodex</div>\n//         <SearchBox \n//         onChangeHandler= {onSearchChange} \n//         placeholder={'search monsters'}\n//         className= {'monster-search-box'}\n//         />\n//         <CardList monsters={filteredMonster}/>\n//       </div>\n//     );\n//   }\n// }\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useState","SearchBox","CardList","jsxDEV","_jsxDEV","App","_s","$RefreshSig$","onSearchChange","event","searchField","setSearchField","searchFieldString","target","value","toLowerCase","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onChangeHandler","placeholder","_c","$RefreshReg$"],"sources":["/home/purvi/Desktop/react/react-code2/monster-rolodex/src/App.js"],"sourcesContent":["/**it's a hook that give us ability to \n * convert a local state into a functional component \n * it's used in place of setState \n */\nimport { useState } from \"react\";\nimport \"./App.css\";\nimport SearchBox from \"./components/searchbox/search-box.component\";\nimport CardList from \"./components/card-list/card-list.component\";\n\n\nconst App=() =>{\n\n  onSearchChange= (event) => {\n        /**now here searchField is not as it used to be in class\n         * because setState is not here the same as it was in class \n         * \n         * so we have to do something new here \n         * \n         * using array destructuring\n         * const arr = [2,4];\n         * const [a,b]= arr;\n         * a=2;\n         * b=4;\n         * \n         * similar to that we are going to do it using hook useState \n         * we are also going to not import component as we no longer need it\n         * \n         * now similar to above array destructuring example\n         * useState gives us an array of two values \n         * [value,setValue]\n         *    --> value is of the one that we want to store\n         *    --> setValue is gonna be a set or a function\n         * \n         * now state was an object in class component\n         * that could contain multiple values  \n         *this.state = {\n            monsters: [],\n            searchField: '', //an empty string\n          };\n\n         * now state here is similar to the value \n         * but like object they can not take multiple values \n         * so here they are individual values\n         * if we want to take multiple values we need to use this hook \n         * multiple times  \n         * \n         * now here setValue \n         * is the function telling how the value must change \n         * \n         * and in useState value changes completely while in\n         * setState it used to update \n        */\n       const[searchField, setSearchField] = useState('');\n      /**\n       * well this searchField above is not same as the one below\n       * the one below is just the string we recive from the target\\\n       * so let's change it's name to denote the difference  \n      */  \n     // const searchField = event.target.value.toLowerCase();\n      \n       \n        const searchFieldString = event.target.value.toLowerCase();\n        setSearchField(searchFieldString);\n        // this.setState(\n        //   () => {\n        //     return {searchField};\n        //   }\n        // );\n        // now we haven't used searchField for anything here earlier used to \n\n  }\n  \n\n  return(\n    <div className=\"App\">\n      <div className=\"app-title\">Monsters Rolodex</div>\n        \n      <SearchBox \n      onChangeHandler= {onSearchChange} /**now onSearchChange is function just like before */\n      placeholder={'search monsters'}\n      className= {'monster-search-box'}\n      />\n      {/* <CardList monsters={filteredMonster}/> */}\n    </div>\n  )\n}\n\n/****************************************************** */\n// class App extends Component {\n//   constructor() {\n//     super();\n//     this.state = {\n//       monsters: [],\n//       searchField: '', //an empty string\n//     };\n//   }\n\n//   onSearchChange = (event) => {\n//     const searchField = event.target.value.toLowerCase();\n//     this.setState(\n//       () => {\n//         return {searchField};\n//       }\n//     );\n//   }\n\n//   componentDidMount() {\n//     fetch(\"https://jsonplaceholder.typicode.com/users\")\n//       .then((response) => response.json())\n//       .then((users) => {\n//         this.setState(\n//           () => {\n//             return { monsters: users };\n//           },\n//           () => {\n//             console.log(this.state);\n//           }\n//         );\n//       });\n//   }\n\n//   render() {\n//     const { monsters,searchField } =this.state;\n//     const { onSearchChange } = this;\n//     const filteredMonster = monsters.filter((monster) => {\n//       return monster.name.toLowerCase().includes(searchField); \n//     });\n\n//     return (\n//       <div className=\"App\">\n//         <div className=\"app-title\">Monsters Rolodex</div>\n//         <SearchBox \n//         onChangeHandler= {onSearchChange} \n//         placeholder={'search monsters'}\n//         className= {'monster-search-box'}\n//         />\n//         <CardList monsters={filteredMonster}/>\n//       </div>\n//     );\n//   }\n// }\nexport default App;"],"mappings":";AAAA;AACA;AACA;AACA;AACA,SAASA,QAAQ,QAAQ,OAAO;AAChC,OAAO,WAAW;AAClB,OAAOC,SAAS,MAAM,6CAA6C;AACnE,OAAOC,QAAQ,MAAM,4CAA4C;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAGlE,MAAMC,GAAG,GAACA,CAAA,KAAK;EAAA,IAAAC,EAAA,GAAAC,YAAA;EAEbC,cAAc,GAAAF,EAAA,CAAGG,KAAK,IAAK;IAAAH,EAAA;IACrB;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IAEO,MAAK,CAACI,WAAW,EAAEC,cAAc,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;IAClD;AACN;AACA;AACA;AACA;IACK;;IAGG,MAAMY,iBAAiB,GAAGH,KAAK,CAACI,MAAM,CAACC,KAAK,CAACC,WAAW,CAAC,CAAC;IAC1DJ,cAAc,CAACC,iBAAiB,CAAC;IACjC;IACA;IACA;IACA;IACA;IACA;EAEN,CAAC;EAGD,oBACER,OAAA;IAAKY,SAAS,EAAC,KAAK;IAAAC,QAAA,gBAClBb,OAAA;MAAKY,SAAS,EAAC,WAAW;MAAAC,QAAA,EAAC;IAAgB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,eAEjDjB,OAAA,CAACH,SAAS;MACVqB,eAAe,EAAGd,cAAe,CAAC;MAClCe,WAAW,EAAE,iBAAkB;MAC/BP,SAAS,EAAG;IAAqB;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAChC,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAEC,CAAC;AAEV,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAAG,EAAA,GAlIMnB,GAAG;AAmIT,eAAeA,GAAG;AAAC,IAAAmB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}